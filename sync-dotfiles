#!/usr/bin/python

# Author: Peter Odding <peter@peterodding.com>.
# Homepage: http://peterodding.com/code/sync-dotfiles/

import re
import os
import sys
import tarfile
from shutil import rmtree
from tempfile import mkdtemp
from cStringIO import StringIO
from subprocess import Popen, PIPE

# Magic constants.
CONFIG_FILE = '~/.sync-dotfiles.conf'
FILES_SECTION = 'files:'
EXCLUDE_SECTION = 'exclude:'
HOSTS_SECTION = 'hosts:'
LOCAL_HOST = 'local'
VERBOSE = len(sys.argv) >= 2 \
    and sys.argv[1].startswith('-v') \
    and len(sys.argv[1]) - 1 or 0

def message(fmt, *args):
  sys.stderr.write((fmt + '\n') % args)

def verbose(lvl, fmt, *args):
  if VERBOSE >= lvl:
    message(fmt, *args)

def fatal(fmt, *args):
  message(fmt, *args)
  sys.exit(1)

# Make sure the configuration file exists.
configfile = os.path.expanduser(CONFIG_FILE)
if not os.path.exists(configfile):
  fatal("Missing %s configuration file!", CONFIG_FILE)

# Portable color codes from http://en.wikipedia.org/wiki/ANSI_escape_code#Colors.
colors = dict(black=0, red=1, green=2, yellow=3, blue=4, magenta=5, cyan=6, white=7)
def colorcode(name): return '[0;3%dm' % colors[name]

# Parse the configuration file.
filenames = []
exclude = []
hosts = {}
state = 'default'
for idx, line in enumerate(open(configfile)):
  line = line.strip()
  if line in ('', FILES_SECTION, EXCLUDE_SECTION, HOSTS_SECTION):
    state = line or 'default'
  elif state == FILES_SECTION:
    filenames.append(line)
  elif state == EXCLUDE_SECTION:
    exclude.append(line)
  elif state == HOSTS_SECTION:
    host, color = line.split(':')
    color = color.strip().lower()
    if color not in colors:
      fatal("Invalid color name %r on line %i of %r!", color, idx + 1, configfile)
    hosts[host.strip()] = color
  else:
    fatal("Line %i in %r isn't inside a section!", idx + 1, configfile)

# Validate the configuration.
if LOCAL_HOST not in hosts:
  fatal("""You haven't defined the color of your local prompt so I don't know what to
replace! Hint: Add a %r line to the %r section of %r.""",
      LOCAL_HOST, HOSTS_SECTION, configfile)

# Enable use of relative pathnames.
os.chdir(os.environ['HOME'])

# Create a regex to search for ANSI escape codes.
pattern = re.escape(colorcode(hosts[LOCAL_HOST]))

# Read the dotfiles into memory only once.
dotfiles = {}
def include(path):
  if path in exclude:
    verbose(1, "Ignoring %s", path)
  else:
    if os.path.isdir(path):
      for entry in sorted(os.listdir(path)):
        include(os.path.join(path, entry))
    else:
      handle = open(path)
      content = handle.read()
      dotfiles[path] = {
          'content': content,
          'info': os.stat(path),
          'rewrite': re.search(pattern, content)
      }
      handle.close()
for dotfile in filenames:
  include(dotfile)
sorted_dotfiles = sorted(dotfiles.iteritems())

# For each host, generate a tarball containing all dotfiles and rewrite the
# dotfiles to conform to the above chosen shell prompt colors.

def reversestat(path, info):
  os.chown(path, info.st_uid, info.st_gid)
  os.utime(path, (info.st_atime, info.st_mtime))
  os.chmod(path, info.st_mode)

has_rsync = os.system('rsync --version > /dev/null') == 0
for host, color in hosts.iteritems():
  substitute = colorcode(color)
  if host != LOCAL_HOST:
    if has_rsync:
      message("Preparing files for %s ..", host)
      tempdir = mkdtemp()
      for dotfile, attrs in sorted_dotfiles:
        tempfile = os.path.join(tempdir, dotfile)
        subdir = os.path.split(tempfile)[0]
        if not os.path.isdir(subdir):
          verbose(3, " - %s", subdir)
          os.makedirs(subdir)
        if not attrs['rewrite']:
          verbose(2, " - %s", dotfile)
          os.link(dotfile, tempfile)
        else:
          verbose(1, " - %s (customized colors)", tempfile)
          handle = open(tempfile, 'w')
          handle.write(re.sub(pattern, substitute, attrs['content']))
          handle.close()
          reversestat(tempfile, attrs['info'])
      message("Uploading files to %s ..", host)
      command = 'rsync -%sa "%s/" "%s:"' % (VERBOSE and 'v' or '', tempdir, host)
      verbose(1, "Executing command %s", command)
      status = os.system(command)
      if status:
        fatal("Command exited with status %i:\n\n%s", status, command)
      verbose(1, "Deleting temporary files under %s ..", tempdir)
      rmtree(tempdir)
    else:
      message("Building tarball for %s:", host)
      buf = StringIO()
      tarball = tarfile.open(fileobj=buf, mode='w:bz2')
      for dotfile, attrs in sorted_dotfiles:
        content = attrs['content']
        if attrs['rewrite']:
          content = re.sub(pattern, substitute, content)
          verbose(1, " - %s (customized colors)", dotfile)
        else:
          verbose(2, " - %s", dotfile)
        fileinfo = tarball.gettarinfo(name=dotfile)
        tarball.addfile(fileinfo, StringIO(content))
      tarball.close()
      nbytes = buf.tell()
      buf.seek(0)
      message("Uploading %i KB tarball to %s ..", nbytes / 1024, host)
      ssh = Popen(['ssh', host, 'tar x' + (VERBOSE and 'v' or '') + 'jf -'], stdin=PIPE)
      ssh.communicate(input=buf.read())
      buf.close()

message("All done!")

# vim: ts=2 sw=2 et
